# MediaPipe Holistic Implementation Guide

## Overview

This guide provides comprehensive documentation on how MediaPipe Holistic is integrated into the Hand Assessment application, enabling real-time hand, pose, and body landmark detection for biomechanical analysis.

## Table of Contents

1. [Architecture Overview](#architecture-overview)
2. [Installation & Dependencies](#installation--dependencies)
3. [HTML Setup & CDN Loading](#html-setup--cdn-loading)
4. [Core Components](#core-components)
5. [Initialization Process](#initialization-process)
6. [Configuration Options](#configuration-options)
7. [Results Processing](#results-processing)
8. [Error Handling & Fallbacks](#error-handling--fallbacks)
9. [Performance Optimization](#performance-optimization)
10. [Troubleshooting](#troubleshooting)

## Architecture Overview

The MediaPipe Holistic implementation uses a **multi-layered approach** with robust fallback mechanisms:

```
CDN Script Loading (HTML) → Holistic Tracker Component → MediaPipe Loader → Results Processing
```

### Key Design Principles:
- **CDN-first loading** for deployment compatibility
- **Graceful degradation** from Holistic → Hands-only → Fallback
- **Singleton pattern** for MediaPipe instance management
- **Confidence-based filtering** for reliable tracking

## Installation & Dependencies

### Package Dependencies

```json
{
  "dependencies": {
    "@mediapipe/holistic": "^0.5.1675471629",
    "@mediapipe/hands": "^0.4.1675469240",
    "@mediapipe/camera_utils": "^0.3.1675466862",
    "@mediapipe/control_utils": "^0.6.1629159505",
    "@mediapipe/drawing_utils": "^0.3.1620248257"
  }
}
```

### Installation Command

```bash
npm install @mediapipe/holistic @mediapipe/hands @mediapipe/camera_utils @mediapipe/control_utils @mediapipe/drawing_utils
```

## HTML Setup & CDN Loading

### CDN Script Preloading

Add these scripts to your `index.html` **before** your React application loads:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    
    <!-- MediaPipe preload scripts for deployment compatibility -->
    <script crossorigin src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"></script>
    <script crossorigin src="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js"></script>
    <script crossorigin src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"></script>
    <script crossorigin src="https://cdn.jsdelivr.net/npm/@mediapipe/holistic/holistic.js"></script>
    <script crossorigin src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

**Why CDN Loading?**
- Ensures MediaPipe works in deployed environments
- Prevents build-time bundling issues
- Provides reliable asset serving via CDN
- Enables graceful fallback strategies

## Core Components

### 1. MediaPipe Loader (Singleton)

```typescript
// src/lib/mediapipe-loader.ts
export class MediaPipeLoader {
  private static instance: MediaPipeLoader;
  private handsClass: any = null;
  private loadingPromise: Promise<any> | null = null;
  private isLoaded = false;

  public static getInstance(): MediaPipeLoader {
    if (!MediaPipeLoader.instance) {
      MediaPipeLoader.instance = new MediaPipeLoader();
    }
    return MediaPipeLoader.instance;
  }

  public async loadHandsClass(): Promise<any> {
    if (this.isLoaded && this.handsClass) {
      return this.handsClass;
    }

    if (this.loadingPromise) {
      return this.loadingPromise;
    }

    this.loadingPromise = this.performLoad();
    return this.loadingPromise;
  }

  private async performLoad(): Promise<any> {
    // Strategy 1: Check global window object
    if (typeof window !== 'undefined' && (window as any).Hands) {
      console.log('✓ Found MediaPipe on window object');
      this.handsClass = (window as any).Hands;
      this.isLoaded = true;
      return this.handsClass;
    }

    // Strategy 2: Progressive CDN loading
    const cdnSources = [
      {
        name: 'jsDelivr',
        url: 'https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.4.1675469240/hands.js'
      }
    ];

    for (const source of cdnSources) {
      try {
        await this.loadFromCDN(source);
        if ((window as any).Hands) {
          this.handsClass = (window as any).Hands;
          this.isLoaded = true;
          return this.handsClass;
        }
      } catch (error) {
        console.log(`${source.name} failed:`, error);
        continue;
      }
    }

    // Strategy 3: Fallback implementation
    return this.createFallback();
  }
}
```

### 2. Holistic Tracker Component

```typescript
// src/components/holistic-tracker.tsx
interface HolisticTrackerProps {
  isWristAssessment?: boolean;
  onUpdate?: (data: any) => void;
  onLandmarkUpdate?: (landmarks: any) => void;
}

export function HolisticTracker({ 
  isWristAssessment = false, 
  onUpdate, 
  onLandmarkUpdate 
}: HolisticTrackerProps) {
  const [holisticInitialized, setHolisticInitialized] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const holisticRef = useRef<any>(null);
  const videoRef = useRef<HTMLVideoElement>(null);

  // Initialize MediaPipe Holistic
  const initializeHolistic = useCallback(async () => {
    if (isInitializing || holisticInitialized) return;
    
    setIsInitializing(true);
    try {
      // Wait for MediaPipe to be available
      await waitForMediaPipe();
      
      // Create Holistic instance
      const holisticInstance = new (window as any).Holistic({
        locateFile: (file: string) => {
          return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`;
        }
      });

      // Configure Holistic options
      holisticInstance.setOptions({
        modelComplexity: 1,
        smoothLandmarks: true,
        enableSegmentation: false,
        smoothSegmentation: false,
        refineFaceLandmarks: false,
        minDetectionConfidence: 0.5,
        minTrackingConfidence: 0.5
      });

      // Set up results callback
      holisticInstance.onResults(processHolisticResults);
      
      holisticRef.current = holisticInstance;
      setHolisticInitialized(true);
      
    } catch (error) {
      console.error('Holistic initialization failed:', error);
      // Implement fallback to hands-only tracking
      await initializeHandsFallback();
    } finally {
      setIsInitializing(false);
    }
  }, [isWristAssessment, onUpdate]);

  return (
    <div className="holistic-tracker">
      <video 
        ref={videoRef}
        autoPlay
        playsInline
        muted
        className="w-full h-full object-cover"
      />
      {/* Additional UI elements */}
    </div>
  );
}
```

## Initialization Process

### 1. MediaPipe Availability Check

```typescript
const waitForMediaPipe = async (): Promise<void> => {
  let attempts = 0;
  const maxAttempts = 15;
  
  while (attempts < maxAttempts) {
    // Check if already available from preloaded scripts
    if ((window as any).Holistic) {
      console.log('MediaPipe Holistic found from preloaded scripts');
      return;
    }
    
    // Try dynamic import for local development
    if (attempts < 5) {
      try {
        const [holisticModule, drawingModule] = await Promise.all([
          import('@mediapipe/holistic').catch(() => null),
          import('@mediapipe/drawing_utils').catch(() => null)
        ]);
        
        if (holisticModule?.Holistic) {
          (window as any).Holistic = holisticModule.Holistic;
          if (drawingModule?.drawConnectors) {
            (window as any).drawConnectors = drawingModule.drawConnectors;
            (window as any).drawLandmarks = drawingModule.drawLandmarks;
          }
          console.log('MediaPipe Holistic loaded via dynamic import');
          return;
        }
      } catch (importError) {
        console.warn(`Dynamic import attempt ${attempts + 1} failed:`, importError);
      }
    }
    
    attempts++;
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  throw new Error('MediaPipe Holistic could not be loaded');
};
```

### 2. Camera Initialization

```typescript
const initializeCamera = useCallback(async () => {
  if (!holisticRef.current || !videoRef.current) return;

  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      video: {
        width: { ideal: 1280 },
        height: { ideal: 720 },
        facingMode: 'user'
      }
    });

    videoRef.current.srcObject = stream;
    await videoRef.current.play();

    // Initialize MediaPipe Camera
    const camera = new (window as any).Camera(videoRef.current, {
      onFrame: async () => {
        if (holisticRef.current && videoRef.current) {
          await holisticRef.current.send({ image: videoRef.current });
        }
      },
      width: 640,
      height: 480
    });

    await camera.start();
    console.log('Camera initialized successfully');
    
  } catch (error) {
    console.error('Camera initialization failed:', error);
  }
}, [holisticInitialized]);
```

## Configuration Options

### Holistic Configuration

```typescript
const holisticConfig = {
  // Model complexity: 0 (lite), 1 (full), 2 (heavy)
  modelComplexity: 1,
  
  // Enable landmark smoothing
  smoothLandmarks: true,
  
  // Disable segmentation for better performance
  enableSegmentation: false,
  smoothSegmentation: false,
  
  // Disable face refinement for hand-focused tracking
  refineFaceLandmarks: false,
  
  // Detection confidence threshold
  minDetectionConfidence: 0.5,
  
  // Tracking confidence threshold
  minTrackingConfidence: 0.5
};
```

### Hands-Only Fallback Configuration

```typescript
const handsConfig = {
  maxNumHands: 1,
  modelComplexity: 1,
  minDetectionConfidence: 0.5,
  minTrackingConfidence: 0.5,
  staticImageMode: false,
  selfieMode: true
};
```

## Results Processing

### Holistic Results Structure

```typescript
interface HolisticResults {
  leftHandLandmarks?: Array<{x: number, y: number, z: number}>;
  rightHandLandmarks?: Array<{x: number, y: number, z: number}>;
  poseLandmarks?: Array<{x: number, y: number, z: number}>;
  faceLandmarks?: Array<{x: number, y: number, z: number}>;
}

const processHolisticResults = useCallback((results: HolisticResults) => {
  try {
    // Process hand landmarks
    const handData = processHandLandmarks(results);
    
    // Process pose landmarks (for wrist assessment)
    const poseData = processPoseLandmarks(results);
    
    // Combine and validate data
    const processedData = {
      hands: handData,
      pose: poseData,
      timestamp: Date.now(),
      confidence: calculateConfidence(results)
    };
    
    // Send to parent component
    if (onUpdate) {
      onUpdate(processedData);
    }
    
    if (onLandmarkUpdate) {
      onLandmarkUpdate(results);
    }
    
  } catch (error) {
    console.warn('Results processing error:', error);
  }
}, [onUpdate, onLandmarkUpdate]);
```

### Hand Landmark Processing

```typescript
const processHandLandmarks = (results: HolisticResults) => {
  const hands = [];
  
  // Process left hand
  if (results.leftHandLandmarks && results.leftHandLandmarks.length > 0) {
    hands.push({
      handedness: 'Left',
      landmarks: results.leftHandLandmarks,
      confidence: calculateHandConfidence(results.leftHandLandmarks)
    });
  }
  
  // Process right hand
  if (results.rightHandLandmarks && results.rightHandLandmarks.length > 0) {
    hands.push({
      handedness: 'Right',
      landmarks: results.rightHandLandmarks,
      confidence: calculateHandConfidence(results.rightHandLandmarks)
    });
  }
  
  return hands;
};
```

### Pose Landmark Processing (for Wrist Assessment)

```typescript
const processPoseLandmarks = (results: HolisticResults) => {
  if (!results.poseLandmarks) return null;
  
  // Extract relevant pose landmarks for wrist assessment
  const relevantLandmarks = {
    leftElbow: results.poseLandmarks[13],   // Left elbow
    rightElbow: results.poseLandmarks[14],  // Right elbow
    leftWrist: results.poseLandmarks[15],   // Left wrist
    rightWrist: results.poseLandmarks[16],  // Right wrist
    leftShoulder: results.poseLandmarks[11], // Left shoulder
    rightShoulder: results.poseLandmarks[12] // Right shoulder
  };
  
  return relevantLandmarks;
};
```

## Error Handling & Fallbacks

### Graceful Degradation Strategy

```typescript
const initializeWithFallback = async () => {
  try {
    // 1. Try Holistic (full body + hands)
    await initializeHolistic();
    console.log('✓ Holistic tracking initialized');
  } catch (holisticError) {
    console.warn('Holistic failed, trying hands-only...', holisticError);
    
    try {
      // 2. Fallback to Hands-only
      await initializeHandsOnly();
      console.log('✓ Hands-only tracking initialized');
    } catch (handsError) {
      console.warn('Hands-only failed, using mock tracking...', handsError);
      
      // 3. Final fallback to mock tracking
      initializeMockTracking();
      console.log('⚠ Using mock tracking (no MediaPipe)');
    }
  }
};
```

### Hands-Only Fallback Implementation

```typescript
const initializeHandsOnly = async () => {
  if ((window as any).Hands) {
    const handsInstance = new (window as any).Hands({
      locateFile: (file: string) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`
    });
    
    handsInstance.setOptions({
      maxNumHands: 1,
      modelComplexity: 1,
      minDetectionConfidence: 0.5,
      minTrackingConfidence: 0.5
    });
    
    handsInstance.onResults((results: any) => {
      // Convert hands results to holistic format
      const holisticResults = {
        leftHandLandmarks: results.multiHandedness?.[0]?.label === 'Left' ? 
          results.multiHandLandmarks?.[0] : null,
        rightHandLandmarks: results.multiHandedness?.[0]?.label === 'Right' ? 
          results.multiHandLandmarks?.[0] : null,
        poseLandmarks: null // No pose data available
      };
      
      processHolisticResults(holisticResults);
    });
    
    handsRef.current = handsInstance;
    return handsInstance;
  }
  
  throw new Error('Hands class not available');
};
```

## Performance Optimization

### 1. Frame Rate Optimization

```typescript
const optimizeFrameRate = () => {
  let lastProcessTime = 0;
  const targetFPS = 30;
  const minInterval = 1000 / targetFPS;
  
  const processFrame = async () => {
    const now = performance.now();
    
    if (now - lastProcessTime >= minInterval) {
      if (holisticRef.current && videoRef.current) {
        await holisticRef.current.send({ image: videoRef.current });
      }
      lastProcessTime = now;
    }
    
    requestAnimationFrame(processFrame);
  };
  
  requestAnimationFrame(processFrame);
};
```

### 2. Memory Management

```typescript
const cleanup = useCallback(() => {
  // Stop camera
  if (videoRef.current?.srcObject) {
    const stream = videoRef.current.srcObject as MediaStream;
    stream.getTracks().forEach(track => track.stop());
  }
  
  // Clear MediaPipe instance
  if (holisticRef.current) {
    holisticRef.current.close();
    holisticRef.current = null;
  }
  
  // Clear animation frames
  if (animationRef.current) {
    cancelAnimationFrame(animationRef.current);
  }
}, []);

useEffect(() => {
  return cleanup;
}, [cleanup]);
```

### 3. Configuration for Different Use Cases

```typescript
// High accuracy for clinical assessments
const clinicalConfig = {
  modelComplexity: 2,
  minDetectionConfidence: 0.8,
  minTrackingConfidence: 0.7,
  smoothLandmarks: true
};

// Performance optimized for demos
const demoConfig = {
  modelComplexity: 0,
  minDetectionConfidence: 0.5,
  minTrackingConfidence: 0.3,
  smoothLandmarks: false
};
```

## Troubleshooting

### Common Issues & Solutions

#### 1. "MediaPipe not loading" Error

**Problem**: MediaPipe scripts fail to load from CDN

**Solution**:
```typescript
// Add retry logic with multiple CDN sources
const loadWithRetry = async (urls: string[], maxRetries = 3) => {
  for (const url of urls) {
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        await loadScript(url);
        return;
      } catch (error) {
        console.warn(`Attempt ${attempt + 1} failed for ${url}:`, error);
      }
    }
  }
  throw new Error('All CDN sources failed');
};
```

#### 2. "Camera permission denied" Error

**Problem**: Browser blocks camera access

**Solution**:
```typescript
const requestCameraWithFallback = async () => {
  try {
    return await navigator.mediaDevices.getUserMedia({ video: true });
  } catch (error) {
    // Provide user-friendly error message
    throw new Error('Camera access required for hand tracking. Please allow camera permissions.');
  }
};
```

#### 3. Poor tracking accuracy

**Problem**: Hand landmarks are unstable or inaccurate

**Solution**:
```typescript
// Implement confidence filtering
const filterLowConfidenceLandmarks = (landmarks: any[], threshold = 0.7) => {
  return landmarks.filter(landmark => 
    landmark.visibility === undefined || landmark.visibility > threshold
  );
};
```

#### 4. Memory leaks during long sessions

**Problem**: Memory usage increases over time

**Solution**:
```typescript
// Implement periodic cleanup
useEffect(() => {
  const cleanupInterval = setInterval(() => {
    if (window.gc) {
      window.gc(); // Force garbage collection in development
    }
  }, 30000); // Every 30 seconds
  
  return () => clearInterval(cleanupInterval);
}, []);
```

### Debug Mode Implementation

```typescript
const enableDebugMode = () => {
  const debug = {
    logFrameRate: true,
    showLandmarks: true,
    logConfidence: true
  };
  
  if (debug.logFrameRate) {
    let frameCount = 0;
    setInterval(() => {
      console.log(`FPS: ${frameCount}`);
      frameCount = 0;
    }, 1000);
  }
  
  return debug;
};
```

## Integration Examples

### Basic Integration

```typescript
import { HolisticTracker } from './components/holistic-tracker';

function AssessmentPage() {
  const handleLandmarkUpdate = (landmarks: any) => {
    console.log('New landmarks:', landmarks);
  };

  return (
    <div className="assessment-container">
      <HolisticTracker 
        isWristAssessment={true}
        onLandmarkUpdate={handleLandmarkUpdate}
      />
    </div>
  );
}
```

### Advanced Integration with Custom Processing

```typescript
function WristAssessment() {
  const [wristAngle, setWristAngle] = useState(0);
  
  const processWristData = useCallback((data: any) => {
    if (data.pose && data.hands.length > 0) {
      const angle = calculateWristAngle(data.pose, data.hands[0]);
      setWristAngle(angle);
    }
  }, []);

  return (
    <div className="wrist-assessment">
      <HolisticTracker 
        onUpdate={processWristData}
        isWristAssessment={true}
      />
      <div className="angle-display">
        Current Wrist Angle: {wristAngle.toFixed(1)}°
      </div>
    </div>
  );
}
```

## Deployment Considerations

### Production Checklist

- [ ] CDN scripts preloaded in HTML
- [ ] Fallback mechanisms implemented
- [ ] Error boundaries in place
- [ ] Memory cleanup on unmount
- [ ] HTTPS enforced for camera access
- [ ] Performance monitoring enabled

### Environment-Specific Configuration

```typescript
const getMediaPipeConfig = () => {
  const isDevelopment = process.env.NODE_ENV === 'development';
  const isProduction = process.env.NODE_ENV === 'production';
  
  return {
    enableDebug: isDevelopment,
    modelComplexity: isProduction ? 1 : 0,
    maxRetries: isProduction ? 5 : 2,
    fallbackEnabled: true
  };
};
```

This comprehensive guide covers the complete MediaPipe Holistic implementation from the Hand Assessment application. The system provides robust hand and pose tracking with multiple fallback strategies, making it suitable for production deployment while maintaining high accuracy for clinical assessments.